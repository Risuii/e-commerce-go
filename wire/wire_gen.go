// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"e-commerce/config"
	repository3 "e-commerce/internal/authentication/data/repository"
	source3 "e-commerce/internal/authentication/data/source"
	"e-commerce/internal/authentication/delivery/presenter/http"
	usecase2 "e-commerce/internal/authentication/domain/usecase"
	"e-commerce/internal/logging/data/repository"
	"e-commerce/internal/logging/data/source"
	"e-commerce/internal/logging/domain/usecase"
	http3 "e-commerce/internal/product/delivery/presenter/http"
	repository4 "e-commerce/internal/store/data/repository"
	source4 "e-commerce/internal/store/data/source"
	http2 "e-commerce/internal/store/delivery/presenter/http"
	usecase3 "e-commerce/internal/store/domain/usecase"
	repository2 "e-commerce/internal/user/data/repository"
	source2 "e-commerce/internal/user/data/source"
	"e-commerce/library"
	"e-commerce/middlewares"
	"e-commerce/pkg/bcrypt"
	"e-commerce/pkg/crypto"
	"e-commerce/pkg/custom_validation"
	"e-commerce/pkg/data_sources/e-commerce"
	"e-commerce/pkg/data_sources/redis"
	"e-commerce/pkg/jwe"
	"e-commerce/routes"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InjectRoute(config2 config.Config, library2 library.Library) routes.Routes {
	engine := gin.New()
	jwe := jwt.NewJWE(config2, library2)
	ecommerceEcommerce := ecommerce.New(config2, library2)
	logActivity := source.NewLogActivityPersistent(library2, ecommerceEcommerce)
	repositoryLogActivity := repository.NewLogActivity(logActivity)
	loggingUsecase := usecase.NewLogUsecase(repositoryLogActivity, library2)
	middleware := middlewares.NewMiddleware(config2, library2, jwe, loggingUsecase)
	customValidation := custom_validation.NewCustomValidation(config2, library2)
	customCrypto := utils.NewCustomCrypto(config2, library2)
	bcrypt := provider.NewBcrypt()
	userPersistent := source2.NewUserPersistent(library2, ecommerceEcommerce)
	userRepository := repository2.NewUserRepository(userPersistent)
	registerUseCase := usecase2.NewRegisterUseCase(library2, customCrypto, config2, bcrypt, repositoryLogActivity, userRepository)
	redis := cache_data_source.New(config2, library2)
	authenticationMemory := source3.NewAuthenticationMemory(config2, library2, redis)
	authenticationRepository := repository3.NewAuthenticationRepository(library2, authenticationMemory)
	loginUsecase := usecase2.NewLoginUsecase(jwe, bcrypt, customCrypto, library2, config2, userRepository, authenticationRepository)
	logoutUsecase := usecase2.NewLogoutUsecase(library2, authenticationRepository)
	userHandler := http.NewUserHandler(library2, customValidation, registerUseCase, loginUsecase, logoutUsecase)
	storePersistent := source4.NewStorePersistent(library2, ecommerceEcommerce)
	storeRepository := repository4.NewStoreRepository(storePersistent)
	createStoreUsecase := usecase3.NewCreateStoreUsecase(library2, storeRepository)
	updateStoreUsecase := usecase3.NewUpdateStoreUsecase(library2, storeRepository)
	getStoreUsecase := usecase3.NewGetStoreUsecase(library2, storeRepository)
	changeStoreStatusUsecase := usecase3.NewChangeStoreStatus(library2, storeRepository)
	storeHandler := http2.NewStoreHandler(library2, customValidation, createStoreUsecase, updateStoreUsecase, getStoreUsecase, changeStoreStatusUsecase)
	productHandler := http3.NewProductHandler(library2, customValidation)
	routesRoutes := routes.New(engine, library2, middleware, userHandler, storeHandler, productHandler)
	return routesRoutes
}

// wire.go:

var ProviderSet = wire.NewSet(gin.New, utils.NewCustomCrypto, provider.NewBcrypt, custom_validation.NewCustomValidation, jwt.NewJWE, ecommerce.New, cache_data_source.New, source.NewLogActivityPersistent, source2.NewUserPersistent, source3.NewAuthenticationMemory, source4.NewStorePersistent, repository.NewLogActivity, repository2.NewUserRepository, repository3.NewAuthenticationRepository, repository4.NewStoreRepository, usecase2.NewRegisterUseCase, usecase2.NewLoginUsecase, usecase2.NewLogoutUsecase, usecase.NewLogUsecase, usecase3.NewCreateStoreUsecase, usecase3.NewUpdateStoreUsecase, usecase3.NewGetStoreUsecase, usecase3.NewChangeStoreStatus, http.NewUserHandler, http2.NewStoreHandler, http3.NewProductHandler, middlewares.NewMiddleware, routes.New)
