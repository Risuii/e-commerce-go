// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bcrypt/bcrypt.go

// Package mock_provider is a generated GoMock package.
package mock_provider

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBcrypt is a mock of Bcrypt interface.
type MockBcrypt struct {
	ctrl     *gomock.Controller
	recorder *MockBcryptMockRecorder
}

// MockBcryptMockRecorder is the mock recorder for MockBcrypt.
type MockBcryptMockRecorder struct {
	mock *MockBcrypt
}

// NewMockBcrypt creates a new mock instance.
func NewMockBcrypt(ctrl *gomock.Controller) *MockBcrypt {
	mock := &MockBcrypt{ctrl: ctrl}
	mock.recorder = &MockBcryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBcrypt) EXPECT() *MockBcryptMockRecorder {
	return m.recorder
}

// CompareHashAndPassword mocks base method.
func (m *MockBcrypt) CompareHashAndPassword(ctx context.Context, hashedPassword, password []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", ctx, hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockBcryptMockRecorder) CompareHashAndPassword(ctx, hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockBcrypt)(nil).CompareHashAndPassword), ctx, hashedPassword, password)
}

// GenerateFromPassword mocks base method.
func (m *MockBcrypt) GenerateFromPassword(ctx context.Context, password []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFromPassword", ctx, password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFromPassword indicates an expected call of GenerateFromPassword.
func (mr *MockBcryptMockRecorder) GenerateFromPassword(ctx, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFromPassword", reflect.TypeOf((*MockBcrypt)(nil).GenerateFromPassword), ctx, password)
}
