// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth/domain/usecase/register.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	dto "e-commerce/internal/auth/delivery/dto"
	request_information "e-commerce/pkg/request_information"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegisterUseCase is a mock of RegisterUseCase interface.
type MockRegisterUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUseCaseMockRecorder
}

// MockRegisterUseCaseMockRecorder is the mock recorder for MockRegisterUseCase.
type MockRegisterUseCaseMockRecorder struct {
	mock *MockRegisterUseCase
}

// NewMockRegisterUseCase creates a new mock instance.
func NewMockRegisterUseCase(ctrl *gomock.Controller) *MockRegisterUseCase {
	mock := &MockRegisterUseCase{ctrl: ctrl}
	mock.recorder = &MockRegisterUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUseCase) EXPECT() *MockRegisterUseCaseMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockRegisterUseCase) Index(requestInfo request_information.RequestInformation, param dto.RegisterParam, traceId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", requestInfo, param, traceId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockRegisterUseCaseMockRecorder) Index(requestInfo, param, traceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockRegisterUseCase)(nil).Index), requestInfo, param, traceId)
}
