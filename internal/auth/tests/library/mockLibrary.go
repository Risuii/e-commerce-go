// Code generated by MockGen. DO NOT EDIT.
// Source: library/library.go

// Package mock_library is a generated GoMock package.
package mock_library

import (
	bytes "bytes"
	context "context"
	cipher "crypto/cipher"
	io "io"
	http "net/http"
	reflect "reflect"
	strings "strings"
	time "time"

	goquery "github.com/PuerkitoBio/goquery"
	uasurfer "github.com/avct/uasurfer"
	jwt "github.com/golang-jwt/jwt/v4"
	gomock "github.com/golang/mock/gomock"
	lib "github.com/sendinblue/APIv3-go-library/v2/lib"
	logrus "github.com/sirupsen/logrus"
	rotatefilehook "github.com/snowzach/rotatefilehook"
	excelize "github.com/xuri/excelize/v2"
)

// MockLibrary is a mock of Library interface.
type MockLibrary struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryMockRecorder
}

// MockLibraryMockRecorder is the mock recorder for MockLibrary.
type MockLibraryMockRecorder struct {
	mock *MockLibrary
}

// NewMockLibrary creates a new mock instance.
func NewMockLibrary(ctrl *gomock.Controller) *MockLibrary {
	mock := &MockLibrary{ctrl: ctrl}
	mock.recorder = &MockLibraryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibrary) EXPECT() *MockLibraryMockRecorder {
	return m.recorder
}

// AESNewCipher mocks base method.
func (m *MockLibrary) AESNewCipher(key []byte) (cipher.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AESNewCipher", key)
	ret0, _ := ret[0].(cipher.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AESNewCipher indicates an expected call of AESNewCipher.
func (mr *MockLibraryMockRecorder) AESNewCipher(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AESNewCipher", reflect.TypeOf((*MockLibrary)(nil).AESNewCipher), key)
}

// Atoi mocks base method.
func (m *MockLibrary) Atoi(s string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Atoi", s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Atoi indicates an expected call of Atoi.
func (mr *MockLibraryMockRecorder) Atoi(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Atoi", reflect.TypeOf((*MockLibrary)(nil).Atoi), s)
}

// Base64DecodeString mocks base method.
func (m *MockLibrary) Base64DecodeString(s string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base64DecodeString", s)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Base64DecodeString indicates an expected call of Base64DecodeString.
func (mr *MockLibraryMockRecorder) Base64DecodeString(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base64DecodeString", reflect.TypeOf((*MockLibrary)(nil).Base64DecodeString), s)
}

// BytesEqual mocks base method.
func (m *MockLibrary) BytesEqual(a, b []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesEqual", a, b)
	ret0, _ := ret[0].(bool)
	return ret0
}

// BytesEqual indicates an expected call of BytesEqual.
func (mr *MockLibraryMockRecorder) BytesEqual(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesEqual", reflect.TypeOf((*MockLibrary)(nil).BytesEqual), a, b)
}

// CastJWTMapClaims mocks base method.
func (m *MockLibrary) CastJWTMapClaims(jwtToken *jwt.Token) (jwt.MapClaims, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CastJWTMapClaims", jwtToken)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CastJWTMapClaims indicates an expected call of CastJWTMapClaims.
func (mr *MockLibraryMockRecorder) CastJWTMapClaims(jwtToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CastJWTMapClaims", reflect.TypeOf((*MockLibrary)(nil).CastJWTMapClaims), jwtToken)
}

// CastJWTSigningMethodHMAC mocks base method.
func (m *MockLibrary) CastJWTSigningMethodHMAC(jwtToken *jwt.Token) (*jwt.SigningMethodHMAC, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CastJWTSigningMethodHMAC", jwtToken)
	ret0, _ := ret[0].(*jwt.SigningMethodHMAC)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CastJWTSigningMethodHMAC indicates an expected call of CastJWTSigningMethodHMAC.
func (mr *MockLibraryMockRecorder) CastJWTSigningMethodHMAC(jwtToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CastJWTSigningMethodHMAC", reflect.TypeOf((*MockLibrary)(nil).CastJWTSigningMethodHMAC), jwtToken)
}

// Contains mocks base method.
func (m *MockLibrary) Contains(s, substr string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", s, substr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockLibraryMockRecorder) Contains(s, substr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockLibrary)(nil).Contains), s, substr)
}

// Errorf mocks base method.
func (m *MockLibrary) Errorf(format string, argrs ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range argrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Errorf", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLibraryMockRecorder) Errorf(format interface{}, argrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, argrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLibrary)(nil).Errorf), varargs...)
}

// ExcelizeOpenReader mocks base method.
func (m *MockLibrary) ExcelizeOpenReader(r io.Reader, opts ...excelize.Options) (*excelize.File, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{r}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExcelizeOpenReader", varargs...)
	ret0, _ := ret[0].(*excelize.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExcelizeOpenReader indicates an expected call of ExcelizeOpenReader.
func (mr *MockLibraryMockRecorder) ExcelizeOpenReader(r interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{r}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcelizeOpenReader", reflect.TypeOf((*MockLibrary)(nil).ExcelizeOpenReader), varargs...)
}

// GenerateUUID mocks base method.
func (m *MockLibrary) GenerateUUID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUUID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUUID indicates an expected call of GenerateUUID.
func (mr *MockLibraryMockRecorder) GenerateUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUUID", reflect.TypeOf((*MockLibrary)(nil).GenerateUUID))
}

// GetAES256CBCBlockSize mocks base method.
func (m *MockLibrary) GetAES256CBCBlockSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAES256CBCBlockSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetAES256CBCBlockSize indicates an expected call of GetAES256CBCBlockSize.
func (mr *MockLibraryMockRecorder) GetAES256CBCBlockSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAES256CBCBlockSize", reflect.TypeOf((*MockLibrary)(nil).GetAES256CBCBlockSize))
}

// GetNewRotateFileHook mocks base method.
func (m *MockLibrary) GetNewRotateFileHook(config rotatefilehook.RotateFileConfig) (logrus.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewRotateFileHook", config)
	ret0, _ := ret[0].(logrus.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewRotateFileHook indicates an expected call of GetNewRotateFileHook.
func (mr *MockLibraryMockRecorder) GetNewRotateFileHook(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewRotateFileHook", reflect.TypeOf((*MockLibrary)(nil).GetNewRotateFileHook), config)
}

// GetNow mocks base method.
func (m *MockLibrary) GetNow() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNow")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetNow indicates an expected call of GetNow.
func (mr *MockLibraryMockRecorder) GetNow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNow", reflect.TypeOf((*MockLibrary)(nil).GetNow))
}

// GetSince mocks base method.
func (m *MockLibrary) GetSince(t time.Time) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSince", t)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetSince indicates an expected call of GetSince.
func (mr *MockLibraryMockRecorder) GetSince(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSince", reflect.TypeOf((*MockLibrary)(nil).GetSince), t)
}

// GetSlicesByteLen mocks base method.
func (m *MockLibrary) GetSlicesByteLen(v []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlicesByteLen", v)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSlicesByteLen indicates an expected call of GetSlicesByteLen.
func (mr *MockLibraryMockRecorder) GetSlicesByteLen(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlicesByteLen", reflect.TypeOf((*MockLibrary)(nil).GetSlicesByteLen), v)
}

// Getenv mocks base method.
func (m *MockLibrary) Getenv(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getenv", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Getenv indicates an expected call of Getenv.
func (mr *MockLibraryMockRecorder) Getenv(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getenv", reflect.TypeOf((*MockLibrary)(nil).Getenv), key)
}

// Getwd mocks base method.
func (m *MockLibrary) Getwd() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getwd")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getwd indicates an expected call of Getwd.
func (mr *MockLibraryMockRecorder) Getwd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getwd", reflect.TypeOf((*MockLibrary)(nil).Getwd))
}

// HasSuffix mocks base method.
func (m *MockLibrary) HasSuffix(s, suffix []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSuffix", s, suffix)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSuffix indicates an expected call of HasSuffix.
func (mr *MockLibraryMockRecorder) HasSuffix(s, suffix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSuffix", reflect.TypeOf((*MockLibrary)(nil).HasSuffix), s, suffix)
}

// Itoa mocks base method.
func (m *MockLibrary) Itoa(i int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Itoa", i)
	ret0, _ := ret[0].(string)
	return ret0
}

// Itoa indicates an expected call of Itoa.
func (mr *MockLibraryMockRecorder) Itoa(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Itoa", reflect.TypeOf((*MockLibrary)(nil).Itoa), i)
}

// JWTSignedString mocks base method.
func (m *MockLibrary) JWTSignedString(jwtToken *jwt.Token, key interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWTSignedString", jwtToken, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JWTSignedString indicates an expected call of JWTSignedString.
func (mr *MockLibraryMockRecorder) JWTSignedString(jwtToken, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWTSignedString", reflect.TypeOf((*MockLibrary)(nil).JWTSignedString), jwtToken, key)
}

// JsonMarshal mocks base method.
func (m *MockLibrary) JsonMarshal(v interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JsonMarshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JsonMarshal indicates an expected call of JsonMarshal.
func (mr *MockLibraryMockRecorder) JsonMarshal(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JsonMarshal", reflect.TypeOf((*MockLibrary)(nil).JsonMarshal), v)
}

// JsonUnmarshal mocks base method.
func (m *MockLibrary) JsonUnmarshal(data []byte, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JsonUnmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// JsonUnmarshal indicates an expected call of JsonUnmarshal.
func (mr *MockLibraryMockRecorder) JsonUnmarshal(data, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JsonUnmarshal", reflect.TypeOf((*MockLibrary)(nil).JsonUnmarshal), data, v)
}

// LoadEnv mocks base method.
func (m *MockLibrary) LoadEnv(filenames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filenames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadEnv", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadEnv indicates an expected call of LoadEnv.
func (mr *MockLibraryMockRecorder) LoadEnv(filenames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEnv", reflect.TypeOf((*MockLibrary)(nil).LoadEnv), filenames...)
}

// MathCeil mocks base method.
func (m *MockLibrary) MathCeil(arg0 float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MathCeil", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// MathCeil indicates an expected call of MathCeil.
func (mr *MockLibraryMockRecorder) MathCeil(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MathCeil", reflect.TypeOf((*MockLibrary)(nil).MathCeil), arg0)
}

// Md5ToHex mocks base method.
func (m *MockLibrary) Md5ToHex(data []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Md5ToHex", data)
	ret0, _ := ret[0].(string)
	return ret0
}

// Md5ToHex indicates an expected call of Md5ToHex.
func (mr *MockLibraryMockRecorder) Md5ToHex(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Md5ToHex", reflect.TypeOf((*MockLibrary)(nil).Md5ToHex), data)
}

// NewBuffer mocks base method.
func (m *MockLibrary) NewBuffer(buf []byte) *bytes.Buffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBuffer", buf)
	ret0, _ := ret[0].(*bytes.Buffer)
	return ret0
}

// NewBuffer indicates an expected call of NewBuffer.
func (mr *MockLibraryMockRecorder) NewBuffer(buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBuffer", reflect.TypeOf((*MockLibrary)(nil).NewBuffer), buf)
}

// NewBytesReader mocks base method.
func (m *MockLibrary) NewBytesReader(b []byte) *bytes.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBytesReader", b)
	ret0, _ := ret[0].(*bytes.Reader)
	return ret0
}

// NewBytesReader indicates an expected call of NewBytesReader.
func (mr *MockLibraryMockRecorder) NewBytesReader(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBytesReader", reflect.TypeOf((*MockLibrary)(nil).NewBytesReader), b)
}

// NewDocumentFromReader mocks base method.
func (m *MockLibrary) NewDocumentFromReader(r io.Reader) (*goquery.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDocumentFromReader", r)
	ret0, _ := ret[0].(*goquery.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDocumentFromReader indicates an expected call of NewDocumentFromReader.
func (mr *MockLibraryMockRecorder) NewDocumentFromReader(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDocumentFromReader", reflect.TypeOf((*MockLibrary)(nil).NewDocumentFromReader), r)
}

// NewReader mocks base method.
func (m *MockLibrary) NewReader(s string) *strings.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader", s)
	ret0, _ := ret[0].(*strings.Reader)
	return ret0
}

// NewReader indicates an expected call of NewReader.
func (mr *MockLibraryMockRecorder) NewReader(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockLibrary)(nil).NewReader), s)
}

// NewRequest mocks base method.
func (m *MockLibrary) NewRequest(method, url string, body io.Reader) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", method, url, body)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockLibraryMockRecorder) NewRequest(method, url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockLibrary)(nil).NewRequest), method, url, body)
}

// NopCloser mocks base method.
func (m *MockLibrary) NopCloser(r io.Reader) io.ReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NopCloser", r)
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// NopCloser indicates an expected call of NopCloser.
func (mr *MockLibraryMockRecorder) NopCloser(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NopCloser", reflect.TypeOf((*MockLibrary)(nil).NopCloser), r)
}

// OuterHtml mocks base method.
func (m *MockLibrary) OuterHtml(s *goquery.Selection) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OuterHtml", s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OuterHtml indicates an expected call of OuterHtml.
func (mr *MockLibraryMockRecorder) OuterHtml(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OuterHtml", reflect.TypeOf((*MockLibrary)(nil).OuterHtml), s)
}

// ParseInt mocks base method.
func (m *MockLibrary) ParseInt(v byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseInt", v)
	ret0, _ := ret[0].(int)
	return ret0
}

// ParseInt indicates an expected call of ParseInt.
func (mr *MockLibraryMockRecorder) ParseInt(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseInt", reflect.TypeOf((*MockLibrary)(nil).ParseInt), v)
}

// ParseTime mocks base method.
func (m *MockLibrary) ParseTime(layout, value string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTime", layout, value)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTime indicates an expected call of ParseTime.
func (mr *MockLibraryMockRecorder) ParseTime(layout, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTime", reflect.TypeOf((*MockLibrary)(nil).ParseTime), layout, value)
}

// ParseUserAgent mocks base method.
func (m *MockLibrary) ParseUserAgent(userAgent string) *uasurfer.UserAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUserAgent", userAgent)
	ret0, _ := ret[0].(*uasurfer.UserAgent)
	return ret0
}

// ParseUserAgent indicates an expected call of ParseUserAgent.
func (mr *MockLibraryMockRecorder) ParseUserAgent(userAgent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUserAgent", reflect.TypeOf((*MockLibrary)(nil).ParseUserAgent), userAgent)
}

// Println mocks base method.
func (m *MockLibrary) Println(a ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Println", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Println indicates an expected call of Println.
func (mr *MockLibraryMockRecorder) Println(a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockLibrary)(nil).Println), a...)
}

// RandIntn mocks base method.
func (m *MockLibrary) RandIntn(n int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandIntn", n)
	ret0, _ := ret[0].(int)
	return ret0
}

// RandIntn indicates an expected call of RandIntn.
func (mr *MockLibraryMockRecorder) RandIntn(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandIntn", reflect.TypeOf((*MockLibrary)(nil).RandIntn), n)
}

// RandRead mocks base method.
func (m *MockLibrary) RandRead(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandRead", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandRead indicates an expected call of RandRead.
func (mr *MockLibraryMockRecorder) RandRead(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandRead", reflect.TypeOf((*MockLibrary)(nil).RandRead), b)
}

// RandSeed mocks base method.
func (m *MockLibrary) RandSeed(seed int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RandSeed", seed)
}

// RandSeed indicates an expected call of RandSeed.
func (mr *MockLibraryMockRecorder) RandSeed(seed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandSeed", reflect.TypeOf((*MockLibrary)(nil).RandSeed), seed)
}

// ReadAll mocks base method.
func (m *MockLibrary) ReadAll(r io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", r)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockLibraryMockRecorder) ReadAll(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockLibrary)(nil).ReadAll), r)
}

// ReadConfig mocks base method.
func (m *MockLibrary) ReadConfig(path string, cfg interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfig", path, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadConfig indicates an expected call of ReadConfig.
func (mr *MockLibraryMockRecorder) ReadConfig(path, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfig", reflect.TypeOf((*MockLibrary)(nil).ReadConfig), path, cfg)
}

// ReadEnv mocks base method.
func (m *MockLibrary) ReadEnv(cfg interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEnv", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadEnv indicates an expected call of ReadEnv.
func (mr *MockLibraryMockRecorder) ReadEnv(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEnv", reflect.TypeOf((*MockLibrary)(nil).ReadEnv), cfg)
}

// ReadFile mocks base method.
func (m *MockLibrary) ReadFile(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockLibraryMockRecorder) ReadFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockLibrary)(nil).ReadFile), path)
}

// ReflectNew mocks base method.
func (m *MockLibrary) ReflectNew(typ reflect.Type) reflect.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReflectNew", typ)
	ret0, _ := ret[0].(reflect.Value)
	return ret0
}

// ReflectNew indicates an expected call of ReflectNew.
func (mr *MockLibraryMockRecorder) ReflectNew(typ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReflectNew", reflect.TypeOf((*MockLibrary)(nil).ReflectNew), typ)
}

// ReflectStructOf mocks base method.
func (m *MockLibrary) ReflectStructOf(fields []reflect.StructField) reflect.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReflectStructOf", fields)
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// ReflectStructOf indicates an expected call of ReflectStructOf.
func (mr *MockLibraryMockRecorder) ReflectStructOf(fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReflectStructOf", reflect.TypeOf((*MockLibrary)(nil).ReflectStructOf), fields)
}

// ReflectTypeOf mocks base method.
func (m *MockLibrary) ReflectTypeOf(i any) reflect.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReflectTypeOf", i)
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// ReflectTypeOf indicates an expected call of ReflectTypeOf.
func (mr *MockLibraryMockRecorder) ReflectTypeOf(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReflectTypeOf", reflect.TypeOf((*MockLibrary)(nil).ReflectTypeOf), i)
}

// SendTransacEmail mocks base method.
func (m *MockLibrary) SendTransacEmail(client *lib.APIClient, ctx context.Context, sendSmtpEmail lib.SendSmtpEmail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransacEmail", client, ctx, sendSmtpEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTransacEmail indicates an expected call of SendTransacEmail.
func (mr *MockLibraryMockRecorder) SendTransacEmail(client, ctx, sendSmtpEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransacEmail", reflect.TypeOf((*MockLibrary)(nil).SendTransacEmail), client, ctx, sendSmtpEmail)
}

// Split mocks base method.
func (m *MockLibrary) Split(s, sep string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Split", s, sep)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Split indicates an expected call of Split.
func (mr *MockLibraryMockRecorder) Split(s, sep interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Split", reflect.TypeOf((*MockLibrary)(nil).Split), s, sep)
}

// Sprintf mocks base method.
func (m *MockLibrary) Sprintf(format string, argrs ...any) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range argrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sprintf", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Sprintf indicates an expected call of Sprintf.
func (mr *MockLibraryMockRecorder) Sprintf(format interface{}, argrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, argrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sprintf", reflect.TypeOf((*MockLibrary)(nil).Sprintf), varargs...)
}

// StringsJoin mocks base method.
func (m *MockLibrary) StringsJoin(strs []string, sep string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringsJoin", strs, sep)
	ret0, _ := ret[0].(string)
	return ret0
}

// StringsJoin indicates an expected call of StringsJoin.
func (mr *MockLibraryMockRecorder) StringsJoin(strs, sep interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringsJoin", reflect.TypeOf((*MockLibrary)(nil).StringsJoin), strs, sep)
}

// StringsReplace mocks base method.
func (m *MockLibrary) StringsReplace(s, old, new string, n int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringsReplace", s, old, new, n)
	ret0, _ := ret[0].(string)
	return ret0
}

// StringsReplace indicates an expected call of StringsReplace.
func (mr *MockLibraryMockRecorder) StringsReplace(s, old, new, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringsReplace", reflect.TypeOf((*MockLibrary)(nil).StringsReplace), s, old, new, n)
}

// ToLower mocks base method.
func (m *MockLibrary) ToLower(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToLower", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// ToLower indicates an expected call of ToLower.
func (mr *MockLibraryMockRecorder) ToLower(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToLower", reflect.TypeOf((*MockLibrary)(nil).ToLower), s)
}

// ToUpper mocks base method.
func (m *MockLibrary) ToUpper(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUpper", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// ToUpper indicates an expected call of ToUpper.
func (mr *MockLibraryMockRecorder) ToUpper(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUpper", reflect.TypeOf((*MockLibrary)(nil).ToUpper), s)
}

// TrimSpace mocks base method.
func (m *MockLibrary) TrimSpace(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrimSpace", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// TrimSpace indicates an expected call of TrimSpace.
func (mr *MockLibraryMockRecorder) TrimSpace(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrimSpace", reflect.TypeOf((*MockLibrary)(nil).TrimSpace), s)
}
